openapi: '3.0.3'
info:
  version: 1.0.0
  title: Voiceflow Dialog Management API
  description: |
    # Overview

    The Dialog Management API is an HTTP API served by Voiceflow's dialog management server.
    It allows your Voiceflow project to be easily integrated into any interface: chatbot, voice assistant, IVR, web chat, and more - without the hassle of implementing the conversational flow using code.

    By sending a request of what a user wants to do, you can use your Voiceflow project to generate the response.

    <img src="https://uploads-ssl.webflow.com/5bddf05642686caf6d17eb58/6036dc95761e92262c2f4bd6_IVR%20(3)-p-1080.png" alt="Voiceflow IVR Integration" style="zoom:50%;"/>

    # Quick Start

    For developers eager to get started without worrying about the details, here are a few quick steps to make your first call with the API:

    1. **Create a project**. You need to first build a conversational project on *[Voiceflow Creator](https://creator.voiceflow.com)*.
    2. **Create API Key**. An admin of your Voiceflow workspace can create and manage API Keys under *Workspace Settings / Developers*.
    3. **Get Version ID**. On your project, it is in the URL: `https://creator.voiceflow.com/project/{versionID}/canvas/...`
    4. **Make a test call**. Use the examples below to make an API call. Make subsequent calls to the same endpoint,
      changing the `payload` to reflect what the user might say. See how the response trace changes based on where in the project the user is.<br/>
      *Make sure to replace the `{apiKey}` and `{versionID}` with what you've gathered on steps 2 and 3*.
    5. **Implement your application**. Get familiar with the API by reading the rest of this documentation, and power the next conversation with your Voiceflow project!

    The **state** API is the *easier implementation* compared to the **stateless** API. But they both achieve the same function.

    <details>
      <summary><b>View API Call Examples</b></summary>
      <details>
        <summary>cURL command line</summary>

        API_KEY='VF.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
        VERSION_ID='xxxxxxxxxxxxxxxxxxxxxxxx'

        USER_ID='user_123'
        USER_INPUT='Hello world!'

        curl --request POST "https://general-runtime.voiceflow.com/state/$VERSION_ID/user/$USER_ID/interact" \
            --header "Authorization: $API_KEY" \
            --header 'Content-Type: application/json' \
            --data-raw "{
                \"request\": { \"type\": \"text\", \"payload\": \"$USER_INPUT\" }
            }"

      </details>
      <details>
        <summary>Node.js</summary>

        const axios = require('axios');

        const apiKey = 'VF.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
        const versionID = 'xxxxxxxxxxxxxxxxxxxxxxxx';

        const userID = 'user_123'; // Unique ID used to track conversation state
        const userInput = 'Hello world!'; // User's message to your Voiceflow project

        const body = {
          request: {
            type: 'text',
            payload: userInput,
          },
        };

        async function startInteract() {
          // Start a conversation
          const response = await axios({
            method: 'POST',
            baseURL: 'https://general-runtime.voiceflow.com',
            url: `/state/${versionID}/user/${userID}/interact`,
            headers: {
              Authorization: apiKey,
            },
            data: body,
          });

          // Log the response
          console.log(response.data);
        }

        startInteract().catch((error) => console.error(error));

      </details>
      <details>
        <summary>Python</summary>

        import requests

        api_key = "VF.xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        version_id = "xxxxxxxxxxxxxxxxxxxxxxxx"

        user_id = "user_123"  # Unique ID used to track conversation state
        user_input = "Hello world!"  # User's message to your Voiceflow project

        body = {"request": {"type": "text", "payload": "Hello world!"}}

        # Start a conversation
        response = requests.post(
            f"https://general-runtime.voiceflow.com/state/{version_id}/user/{user_id}/interact",
            json=body,
            headers={"Authorization": api_key},
        )

        # Log the response
        print(response.json())

      </details>
    </details>

    # Endpoint

    The standard URL base for all Dialog Management API calls:
    *Note: This will be different if you are self-hosting or on a private cloud.*

    ```
    https://general-runtime.voiceflow.com
    ```
tags:
  - name: State API
    description: |
      Voiceflow managed user state - **interact** is the only essential endpoint

      All endpoints take in two parameters in the URL: `{versionID}` and `{userID}`.

      ### versionID
      `{versionID}` is in the URL on your project: `https://creator.voiceflow.com/project/{versionID}/canvas/...`

      ### userID
      `{userID}` will need to be generated yourself - it should be something unique that easily references the person on the session - such as an username, email, device ID, or phone number.
      (*e.g.* `user54646`, `user@gmail.com`, `1-647-424-4242`, etc.).
      If you're not sure what to call it just for testing purposes, you can just pick a random `{userID}` like *steve*.

      For example _".../user/**steve**/interact"_ is going to have a distinct conversation from _".../user/**alice**/interact"_

      *Ensure `{userID}` is consistent every time the same user calls these endpoints.*

      ### Nomenclature
      - `state` is the user metadata - what block they are currently on, what flow they are on, their variables
      - `request` is an object representing a user's action or event
      - `trace` is an array of actions to take based on the request that the user made
  - name: Stateless API
    description: |
      The dialog management **stateless** API is very similar to the **state** API - with one difference:

      Instead of passing `{userID}` in the path parameters to retrieve the state, the entire state is passed in each request and response.

      The same request will *always* produce the same response.

      The API works by passing `state` back and forth, Voiceflow will never store user session data in the process.

      ### Nomenclature
      - `state` is the user metadata - what block they are currently on, what flow they are on, their variables
      - `request` is an object representing a user's action or event
      - `trace` is an array of actions to take based on the request that the user made
  - name: Custom Actions
    description: |
      Take advantage of the **Custom Action step** to allow you Voiceflow project to perform any kind of integration action.

      Examples can include triggering navigation your website or app, processing a credit card payment,
      opening the windows on a car, handing off to a human on a phone call, or anything else your app can support.

      Let's take a look at an example Custom Action step where we want to use a third party integration like *Stripe* for actually charging a credit card:
      ![Credit Card Custom Action](https://user-images.githubusercontent.com/5643574/115419275-333b7d80-a1c8-11eb-9a70-30398f4c9358.png)

      In your request body call, you can specific which Custom Actions to **stop** on in the `config.stopTypes` field:
      ```
      {
        "request": { "type": "text", "payload": "hello!" } // any request type here,
        "config": {
          "stopTypes": ["Pay Credit Card"]
        }
      }
      ```
      This will inform the dialog manager to stop on any `Pay Credit Card` Custom Action, ensuring that the last trace is always the Custom Action.
      By default, Custom Action steps will always go out the default port, but still leave a trace.

      Here's what the Custom Action `trace` for the "Pay Credit Card" block above might look like:
      ```
      [
        ...other_traces,
        {
          "type": "Pay Credit Card",
          "payload": "{ 'amount': 25 }",
          "defaultPath": 0,
          "paths": [
            { "event": { "type": "success" } },
            { "event": { "type": "denied" } },
            { "event": { "type": "pending" } }
          ]
        }
      ]
      ```
      Now whenever we come across a `Pay Credit Card` trace, we can actually trigger a side effect such as the Stripe API and perform the action.
      Depending on the result of that, we can now select which path we want to go down. In the subsequent request body, you simply have to do this:

      ```
      {
        "request": { "type": "success" }
      }
      ```

      Where the `type` of the request is the same as the name of the path you've labelled in Voiceflow.
      If the next request is an invalid path, your project will simply behave as if there were no lines coming out of the Custom Action step.

      In summary, here's what's happening:
      1. We send a request saying to stop on our Custom Action
      2. We get a response which stopped on it
      3. In the next request we specify which path to go down
  - name: Custom NLP/NLU
    description: |
      Instead of using the default NLP service (Microsoft LUIS) provided by Voiceflow, it's easy to use a preferred custom NLP service.
      When making an API request, instead of using a `TextRequest` where the raw string of the user input is provided, use an
      `IntentRequest` and the default Voiceflow NLP is skipped.

      **Example Text Request:**
      ```
      {
        "request": {
          "type": "text", "payload": "can I get a pepperoni pizza?"
        }
      }
      ```

      **NLP Resolved Intent Request:**
      ```
      {
        "request": {
          "type": "intent",
          "payload": {
            "query": "can I get a pepperoni pizza?", // (optional) original raw string of user input
            "intent": {
              "name": "order_pizza_intent" // name of the intent, as specified on Voiceflow
            },
            "entities": [ // array of matched entities, can be empty
              {
                "name": "pizza_type", // name of entity
                "value": "pepperoni" // value of entity
              }
            ]
          }
        }
      }
      ```

      So long as the intent generated by the custom NLP service is passed in as the `IntentRequest` format,
      Voiceflow will be able to generate the appropriate response.

      To export the model to use with your NLP service, go to the interaction model modal (<kbd>M</kbd>), and select the export option.

      <img width="540" alt="NLP Export" src="https://user-images.githubusercontent.com/5643574/123353543-9625f980-d516-11eb-8aee-8e29d1b32d19.png">

      Pick your NLP service of choice.

      <img width="540" alt="Interaction Model" src="https://user-images.githubusercontent.com/5643574/123353537-945c3600-d516-11eb-83e5-41bec0bb05d8.png">

      If your current NLP service is not supported you can consider creating a translation layer for the generalized model in the `.vf`, or contact Voiceflow.

      **Entity/Slot filling** - if the intent on Voiceflow has required entities (i.e `{pizza_size}` for `order_pizza_intent`)
      and it is not filled in the initial request, the entity will be prompted for and you can send a subsequent request with the same intent
      and the `entities` and Voiceflow will be able to automatically merge the initial entities with the new entities.

      For example, on the Voiceflow project for the `order_pizza_intent`, both `{pizza_type}` and `{pizza_size}` are required.
      1. the user says "can I get a pepperoni pizza?",
      2. this gets resolved through the NLP service and sent to Voiceflow as `order_pizza_intent` with entity `{pizza_type}` equal to `pepperoni`
      3. the response will ask "what size pizza do you want?".
      4. The user says "small"
      5. the next request is `order_pizza_intent` with entity `{pizza_size}` equal to `small`
      6. Voiceflow continues the conversation knowing the the user wants a small pepperoni pizza.

      *Note: on Step 5 any intent can be sent and resolved, it just needs to be the same intent to continue the entity filling*
paths:
  '/state/{versionID}/user/{userID}/interact':
    parameters:
      - schema:
          type: string
          example: user@gmail.com
        name: userID
        in: path
        required: true
        description: unique user ID (create this yourself)
      - schema:
          type: string
          example: 5eb039bf90821520c2068cea
        name: versionID
        in: path
        required: true
        description: Voiceflow project version ID
    post:
      tags:
        - State API
      summary: interact
      description: |-
        Resolve a conversation turn.
        Every time a request is sent you will get a unique response based on where the user is currently on in the Voiceflow project.

        Send out a request with a `type` and `payload`, and get back a response with a `trace` array to act on.
        If you've enabled the verbose response parameter you will receive the [same kind of response as the stateless interact route](https://www.voiceflow.com/api/dialog-manager#operation/statelessInteract).

        ```
        // -> request body, send user intention or event
        {
          "request": {
            "type": "text",
            "payload": "can I order a large pepperoni pizza"
          }
        }
        // <- response body, an array of "traces"
        [{
          "type": "speak",
          "payload": {
            "type": "message",
            "message": "would you like fries with that?"
          }
        }, {
          "type": "visual",
          "payload": {
            "image": "https://voiceflow.com/pizza.png"
          }
        }]

        // <- simplified verbose response body
        {
          "state": {
            "stack": [{
              "programID": "home flow",
              "nodeID": "yes no choice node"
            }],
            "storage": {},
            "variables": {
              "pizza_type": "pepperoni"
            }
          },
          "trace": [{
            "type": "speak",
            "payload": {
              "type": "message",
              "message": "would you like fries with that?"
            }
          }, {
            "type": "visual",
            "payload": {
              "image": "https://voiceflow.com/pizza.png"
            }
          }]
        }
        ```
        Common request types are `launch`, `text`, `intent` - reference the **Request Samples** on the right panel for examples.

        Use a `launch` request to reset the user and start from the first block in your Voiceflow project.

        Common response traces include `speak`, `visual`, `choice`, with custom types available - reference **Responses Samples** on the right panel for examples.
        Each trace gets produced by a particular block on your Voiceflow project.
      operationId: stateInteract
      security:
        - API Key:
            - ''
      parameters:
        - name: versionID
          in: path
          description: Voiceflow project version ID
          required: true
          schema:
            type: string
            example: 5eb039bf90821520c2068cea
        - name: userID
          in: path
          description: unique user ID (create this yourself)
          required: true
          schema:
            type: string
            example: user@gmail.com
        - name: verbose
          in: query
          description: enable verbose responses
          required: false
          default: false
          schema:
            type: boolean
            example: false
      requestBody:
        description: info and config required for an interaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/Request'
                config:
                  $ref: '#/components/schemas/Config'
              required:
                - request
            examples:
              Text Request:
                value:
                  request:
                    type: text
                    payload: can I order a large pepperoni pizza
              Empty Request:
                value:
                  request: null
              Intent Request:
                value:
                  request:
                    type: intent
                    payload:
                      query: I want a large pepperoni pizza
                      intent:
                        name: order_pizza_intent
                      entities:
                        - name: size
                          value: large
                        - name: type
                          value: pepperoni
                      confidence: 0.5
              Launch Request:
                value:
                  request:
                    type: launch
              With Config:
                value:
                  request:
                    type: text
                    payload: I would like to order a huge pepperoni pizza
                  config:
                    tts: false
                    stripSSML: true
                    stopTypes:
                      - Pay Credit Card
      responses:
        '200':
          description: A sequential array of response "traces" to display back to the user. They can take a variety of types - common types are defined here.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Verbose response, only returned if you enabled the `verbose` parameter
                    properties:
                      trace:
                        $ref: '#/components/schemas/Trace'
                      state:
                        $ref: '#/components/schemas/State'
                      request:
                        $ref: '#/components/schemas/Request'
                    required:
                      - trace
                  - $ref: '#/components/schemas/Trace'
              examples:
                Dialog Example:
                  value:
                    - type: speak
                      payload:
                        type: message
                        message: one large pepperoni pizza is that correct?
                    - type: speak
                      payload:
                        type: audio
                        src: 'https://voiceflow.com/chime.mp3'
                        message: "<audio src='https://voiceflow.com/chime.mp3'/>"
                    - type: visual
                      payload:
                        image: 'https://voiceflow.com/splash.mp3'
                    - type: choice
                      payload:
                        choices:
                          - name: 'yes'
                          - name: 'no'
                Custom Trace:
                  value:
                    trace:
                      - type: speak
                        payload:
                          type: message
                          message: charging payment now!
                      - type: Pay Credit Card
                        payload: "{ 'sender': 'user@gmail', 'type': 'visa' }"
                        paths:
                          - event:
                              name: success
                          - event:
                              name: denied
                          - event:
                              name: pending
                        defaultPath: 0
        '404':
          description: Not Found
  '/state/{versionID}/user/{userID}':
    parameters:
      - name: versionID
        in: path
        description: Voiceflow project version ID
        required: true
        schema:
          type: string
          example: 5eb039bf90821520c2068cea
      - name: userID
        in: path
        description: unique user ID (create this yourself)
        required: true
        schema:
          type: string
          example: user@gmail.com
    get:
      summary: fetch state
      tags:
        - State API
      security:
        - API Key:
            - ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/State'
                  - type: 'null'
              examples:
                Example State:
                  value:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                    storage: {}
                    variables:
                      pizza_type: pepperoni
                      sessions: 5
                      payment: credit
      operationId: getState
      description: Fetch the user's current state
    put:
      summary: update state
      tags:
        - State API
      operationId: postState
      security:
        - API Key:
            - ''
      responses:
        '200':
          description: successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
              examples:
                Example State:
                  value:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                    storage: {}
                    variables:
                      pizza_type: pepperoni
                      sessions: 5
                      payment: credit
      description: "Update the user's current state, useful for externally updating the user's state, or for resetting everything."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
            examples:
              Example State:
                value:
                  stack:
                    - programID: 6062631246b44d80a8a345b4
                      nodeID: 60626307fd9a230006a5e289
                  storage: {}
                  variables:
                    pizza_type: pepperoni
                    sessions: 5
                    payment: credit
              Empty State:
                value:
                  stack: []
                  storage: {}
                  variables: {}
        description: valid new user state
    delete:
      summary: delete state
      tags:
        - State API
      operationId: deleteState
      security:
        - API Key:
            - ''
      responses:
        '200':
          description: OK
      description: Delete all state and session data for user.
  '/state/{versionID}/user/{userID}/variables':
    parameters:
      - name: versionID
        in: path
        description: Voiceflow project version ID
        required: true
        schema:
          type: string
          example: 5eb039bf90821520c2068cea
      - name: userID
        in: path
        description: unique user ID (create this yourself)
        required: true
        schema:
          type: string
          example: user@gmail.com
    patch:
      summary: update variables
      tags:
        - State API
      security:
        - API Key:
            - ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/State'
                  - type: 'null'
              examples:
                Example State:
                  value:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                    storage: {}
                    variables:
                      pizza_type: pepperoni
                      sessions: 5
                      payment: credit
                      score: 200
      operationId: updateStateVariables
      description: updates the variables in the user's state, merges the provided properties in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                pizza_type: pepperoni
                sessions: 5
        description: object full of variables to update
  '/interact/{versionID}':
    parameters:
      - name: versionID
        schema:
          type: string
          example: 5eb039bf90821520c2068cea
        in: path
        description: Voiceflow project version ID
        required: true
    post:
      summary: interact
      tags:
        - Stateless API
      operationId: statelessInteract
      security:
        - API Key:
            - ''
      description: |
        The stateless API receives a request with `request` + `state`, and responds with a new `state` + `trace`. Here's what it looks like from the Voiceflow creator app prototype tool:

        1. User says/types something, take user's text request and current `state` and sends it via webhook to the Dialog Management API.
        2. Dialog Management goes through each block/flow and updates the user `state`.
        3. Generate a `trace` and new `state` of the user, send back response.
        4. Client interprets API response, and saves the new `state` to use with the next response.

        Repeat all steps each time a user speaks/types to the prototype tool, to perform a conversation.

        Let's take a look at this interaction: the blue user text is the request.
        <img src="https://user-images.githubusercontent.com/5643574/105523483-6c894d80-5cac-11eb-900c-076ed15c1486.png" />

        The simplified example stateless **request**

        ```
        {
          "request": {
            "type": "text",
            "payload": "What is the balance in my chequing account"
          },
          "state": {
            "stack": [{
              "programID": "home flow",
              "nodeID": "prompt node"
            }],
            "storage": {},
            "variables": {
              "chequing_balance": null
            }
          }
        }
        ```

        The simplified example **response**

        ```
        {
          "state": {
            "stack": [{
              "programID": "home flow",
              "nodeID": "yes no choice node"
            }],
            "storage": {},
            "variables": {
              "balance": 0
            }
          },
          "trace": [{
            "type": "speak",
            "payload": {
              "type": "message",
              "message": "the balance in your chequing account is 0 dollars, is that all?"
            },
          }, {
            "type": "choice",
            "payload": {
              "choices": [{"name": "yes"}, {"name": "no"}]
            }
          }],
        }
        ```

        Notice that the `type: text` request got processed by the NLP handler to become an `type: intent` request.
        The `state` is updated, and a `trace` is generated in the API response.

        To move the conversation forward, you can create a request object and pass it in the response body to `/interact/{versionID}` along with the state and optionally a `config` object.
        This will return an updated `state`, an updated `request` (not shown in examples), and the trace array containing the traces to display.

        if `state` is undefined/empty, it will automatically use the **default state** (starting from the first block).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/Request'
                state:
                  $ref: '#/components/schemas/State'
                config:
                  $ref: '#/components/schemas/Config'
              required:
                - request
            examples:
              Text Request:
                value:
                  request:
                    type: text
                    payload: I would like to order a huge pepperoni pizza
                  state:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                        variables: {}
                        storage: {}
                        commands:
                          - type: push
                            event: {}
                    storage: {}
                    variables: {}
              Launch Request:
                value:
                  request:
                    type: launch
              With Config:
                value:
                  request:
                    type: text
                    payload: I would like to order a huge pepperoni pizza
                  state:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                        variables: {}
                        storage: {}
                        commands:
                          - type: push
                            event: {}
                    storage: {}
                    variables: {}
                  config:
                    tts: false
                    stripSSML: true
                    stopTypes:
                      - Pay Credit Card
      responses:
        '200':
          description: A sequential array of response "traces" to display back to the user. They can take a variety of types - common types are defined here.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trace:
                    $ref: '#/components/schemas/Trace'
                  state:
                    $ref: '#/components/schemas/State'
                  request:
                    $ref: '#/components/schemas/Request'
                required:
                  - trace
              examples:
                Dialog Example:
                  value:
                    trace:
                      - type: speak
                        payload:
                          type: message
                          message: one large pepperoni pizza is that correct?
                      - type: speak
                        payload:
                          type: audio
                          src: 'https://voiceflow.com/chime.mp3'
                          message: "<audio src='https://voiceflow.com/chime.mp3'/>"
                      - type: visual
                        payload:
                          image: 'https://voiceflow.com/splash.mp3'
                      - type: choice
                        payload:
                          choices:
                            - name: 'yes'
                            - name: 'no'
                    state:
                      stack:
                        - programID: 6062631246b44d80a8a345b4
                          nodeID: 60626307fd9a230006a5e289
                          variables: {}
                          storage: {}
                          commands:
                            - type: push
                              event: {}
                      storage: {}
                      variables: {}
                Custom Example:
                  value:
                    trace:
                      - type: speak
                        payload:
                          type: message
                          message: charging payment now!
                      - type: Pay Credit Card
                        payload: "{ 'sender': 'user@gmail', 'type': 'visa' }"
                        paths:
                          - event:
                              name: success
                          - event:
                              name: denied
                          - event:
                              name: pending
                        defaultPath: 0
                    state:
                      stack:
                        - programID: 6062631246b44d80a8a345b4
                          nodeID: 60626307fd9a230006a5e289
                          variables: {}
                          storage: {}
                          commands:
                            - type: push
                              event: {}
                      storage: {}
                      variables: {}
  '/interact/{versionID}/state':
    parameters:
      - schema:
          type: string
          example: 5eb039bf90821520c2068cea
        name: versionID
        in: path
        required: true
        description: Voiceflow project version ID
    get:
      summary: default state
      description: |
        The default state as if the user was on the first block on the home flow, with all variables uninitialized.
        This is useful if you want to define variables before starting the conversation.
      tags:
        - Stateless API
      security:
        - API Key:
            - ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
              examples:
                Default State:
                  value:
                    stack:
                      - programID: home flow
                        nodeID: start block
                        variables: {}
                        storage: {}
                        commands: []
                    storage: {}
                    variables:
                      size: 0
                      sessions: 0
                      payment: 0
      operationId: defaultState
externalDocs:
  description: Find out more about Swagger
  url: 'https://swagger.io/docs/specification/about/'
components:
  securitySchemes:
    API Key:
      type: apiKey
      in: header
      name: Authorization
      description: |
        All requests made to the Dialog Management API must be validated with an API Key.
        An admin of your Voiceflow workspace can create and manage API Keys under *Workspace Settings / Developers*.
  schemas:
    IntentRequest:
      title: Intent Request
      type: object
      x-examples:
        Order Pizza:
          type: intent
          payload:
            intent:
              name: order_pizza_intent
            query: I want a huge pepperoni pizza
            entities:
              - name: size
                value: large
                query: huge
              - name: topping
                value: pepperoni
            confidence: 0.5
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - intent
        payload:
          type: object
          required:
            - intent
            - query
            - entities
          properties:
            intent:
              type: object
              properties:
                name:
                  type: string
                  example: order_pizza_intent
            query:
              type: string
              example: I want a large pepperoni pizza
            entities:
              type: array
              items:
                type: object
                required:
                  - name
                  - value
                properties:
                  name:
                    type: string
                    example: size
                  value:
                    type: string
                    example: large
                  query:
                    type: string
                  verboseValue:
                    type: array
                    items:
                      type: object
                      required:
                        - canonicalText
                        - rawText
                        - startIndex
                      properties:
                        canonicalText:
                          type: string
                        rawText:
                          type: string
                        startIndex:
                          type: integer
            confidence:
              type: number
    TextRequest:
      title: Text Request
      type: object
      requuired:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - text
        payload:
          type: string
          example: I would like to order a huge pepperoni pizza
      x-examples:
        example-1:
          type: text
          payload: I would like to order a huge pepperoni pizza
    SpeakTrace:
      title: Speak Trace
      description: Generated by the Speak Step
      type: object
      x-examples:
        Pizza Response:
          type: speak
          payload:
            type: message
            message: one large pepperoni pizza is that correct?
        Audio Speak:
          type: speak
          payload:
            message: "<audio src='https://voiceflow.com/play.mp3'/>"
            src: 'https://voiceflow.com/play.mp3'
            type: audio
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - speak
        payload:
          type: object
          required:
            - message
            - type
          properties:
            message:
              type: string
              example: one large pepperoni pizza is that correct?
            type:
              type: string
              example: message
              enum:
                - message
                - audio
            voice:
              type: string
            src:
              type: string
              nullable: true
    ChoiceTrace:
      title: Choice Trace
      description: Generated by a Choice Step
      type: object
      x-examples:
        Example Choice:
          type: choice
          payload:
            choices:
              - name: 'yes'
              - name: 'no'
      required:
        - type
        - payload
      properties:
        type:
          type: string
          enum:
            - choice
        payload:
          type: object
          required:
            - choices
          properties:
            choices:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: 'yes'
                  intent:
                    type: string
                    example: YesIntent
                required:
                  - name
        defaultPath:
          type: integer
        paths:
          type: array
          items:
            type: object
            required:
              - event
            properties:
              event:
                type: object
                required:
                  - type
                properties:
                  type:
                    type: string
    VisualTrace:
      title: Visual Trace
      type: object
      description: Generated by the Visuals Step
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: visual
          enum:
            - visual
        payload:
          type: object
          oneOf:
            - required:
                - visualType
                - image
                - device
                - dimensions
                - canvasVisibility
              properties:
                visualType:
                  type: string
                image:
                  type: string
                  nullable: true
                device:
                  type: string
                  nullable: true
                dimensions:
                  type: object
                  nullable: true
                  required:
                    - width
                    - height
                  properties:
                    width:
                      type: integer
                    height:
                      type: integer
                canvasVisibility:
                  type: string
                  enum:
                    - full
                    - cropped
                    - hidden
            - required:
                - visualType
                - aplType
              properties:
                visualType:
                  type: string
                title:
                  type: string
                aplType:
                  type: string
                  enum:
                    - JSON
                    - SPLASH
                imageURL:
                  type: string
                document:
                  type: string
                datasource:
                  type: string
                aplCommands:
                  type: string
                jsonFileName:
                  type: string
      x-examples:
        Visual Trace Example:
          type: visual
          payload:
            image: 'https://voiceflow.com/logo.png'
    CustomTrace:
      description: Generated by the Trace Block
      type: object
      x-examples:
        Custom Trace Example:
          type: Pay Credit Card
          payload: "{ 'sender': 'user@gmail', 'body': 'great message' }"
          paths:
            - event:
                name: success
            - event:
                name: denied
            - event:
                name: pending
          defaultPath: 0
      properties:
        type:
          type: string
          minLength: 1
          example: Pay Credit Card
        payload:
          type: string
          minLength: 1
          example: "{ 'sender': 'user@gmail', 'body': 'great message' }"
        paths:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              event:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    example: success
                required:
                  - name
        defaultPath:
          type: number
          example: 0
      required:
        - type
        - payload
        - paths
        - defaultPath
    State:
      title: State
      type: object
      x-examples:
        Example State:
          stack:
            - programID: 6062631246b44d80a8a345b4
              nodeID: 60626307fd9a230006a5e289
          storage: {}
          variables:
            pizza_type: pepperoni
            sessions: 5
            payment: credit
      properties:
        stack:
          type: array
          description: all the flows the user current has active
          items:
            type: object
            properties:
              programID:
                type: string
                description: flow user has on the stack
                example: 6062631246b44d80a8a345b4
              nodeID:
                type: string
                nullable: true
                description: current block this flow is on
                example: 60626307fd9a230006a5e289
              variables:
                type: object
                description: flow scoped variables
              storage:
                type: object
                description: internal flow parameters for runtime
              commands:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - push
                        - jump
                    event:
                      type: object
            required:
              - programID
        storage:
          type: object
        variables:
          type: object
      required:
        - stack
        - storage
        - variables
      description: 'user metadata - what block they are currently on, what flow they are on, their variables'
    LaunchRequest:
      title: Launch Request
      type: object
      properties:
        type:
          type: string
          example: launch
          enum:
            - launch
      required:
        - type
    Request:
      title: Request
      oneOf:
        - $ref: '#/components/schemas/TextRequest'
        - $ref: '#/components/schemas/LaunchRequest'
        - $ref: '#/components/schemas/IntentRequest'
        - type: 'null'
          properties: {}
      description: an object representing a user's action or event
    Config:
      title: Config
      type: object
      description: optional settings
      properties:
        tts:
          type: boolean
          default: false
          description: send back a text-to-speech mp3 audio snippet for every speak block
        stripSSML:
          type: boolean
          default: true
          description: remove all SSML tags in the response message
        stopAll:
          type: boolean
          default: true
          description: stop on all custom traces
        stopTypes:
          type: array
          description: 'which trace types to return prematurely on, define your own path'
          items:
            type: string
            example: Pay Credit Card
            default: '[]'
        excludeTypes:
          type: array
          default: [block, debug, flow]
          description: trace types to not include in the response
      x-examples:
        example-1:
          tts: false
          stripSSML: true
          stopTypes:
            - Pay Credit Card
    Trace:
      title: Trace
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/SpeakTrace'
          - $ref: '#/components/schemas/ChoiceTrace'
          - $ref: '#/components/schemas/VisualTrace'
          - $ref: '#/components/schemas/CustomTrace'
          - type: object
            properties:
              type:
                type: string
              payload: {}
  responses:
    Trace:
      description: A sequential array of response "traces" to display back to the user. They can take a variety of types - common types are defined here.
      content:
        application/json:
          schema:
            type: object
            properties:
              trace:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/SpeakTrace'
                    - $ref: '#/components/schemas/ChoiceTrace'
                    - $ref: '#/components/schemas/VisualTrace'
                    - $ref: '#/components/schemas/CustomTrace'
                    - type: object
                      properties:
                        type:
                          type: string
                        payload: {}
          examples:
            Dialog Example:
              value:
                trace:
                  - type: speak
                    payload:
                      type: message
                      message: one large pepperoni pizza is that correct?
                  - type: speak
                    payload:
                      type: audio
                      src: 'https://voiceflow.com/chime.mp3'
                      message: "<audio src='https://voiceflow.com/chime.mp3'/>"
                  - type: visual
                    payload:
                      image: 'https://voiceflow.com/splash.mp3'
                  - type: choice
                    payload:
                      choices:
                        - name: 'yes'
                        - name: 'no'
            Custom Trace:
              value:
                trace:
                  - type: speak
                    payload:
                      type: message
                      message: charging payment now!
                  - type: Pay Credit Card
                    payload: "{ 'sender': 'user@gmail', 'type': 'visa' }"
                    paths:
                      - event:
                          name: success
                      - event:
                          name: denied
                      - event:
                          name: pending
                    defaultPath: 0
servers:
  - url: 'https://general-runtime.voiceflow.com'
