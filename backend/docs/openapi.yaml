openapi: 3.0.0
info:
  description: 'This API will allows your Voiceflow project to be integrated into any interface: chatbot, voice assistant, IVR, web chat, etc.'
  version: 1.0.0
  title: Voiceflow Runtime API
  contact:
    email: tyler@voiceflow.com
    name: Tyler Han
    url: 'https://voiceflow.com'
tags:
  - name: state
    description: Voiceflow managed user state *(easier implementation)*
  - name: interact
    description: Stateless webhook
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  '/state/{versionID}/user/{userID}/interact':
    post:
      tags:
        - state
      summary: resolve a conversation turn
      description: |-
        Ensure userID is consistent every time the same user calls this endpoint. Generate the user ID yourself - it should be something unique that easily references the person on the session - such as an username, email, deviceID, or phone number.
        (*e.g. `user54646`, `user@gmail.com`, `1-647-424-4242`, etc.*)

        Send out a request, get back a response to act on.
      operationId: stateInteract
      parameters:
        - name: versionID
          in: path
          description: voiceflow project version ID
          required: true
          schema:
            type: string
        - name: userID
          in: path
          description: unique user ID (create this yourself)
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: voiceflow API key
          required: true
          schema:
            type: string
            example: VF.6063709377e568001c098380.XXXXXXXXX.....
      requestBody:
        description: info and config required for an interaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  oneOf:
                    - $ref: '#/components/schemas/TextRequest'
                    - $ref: '#/components/schemas/IntentRequest'
                    - $ref: '#/components/schemas/LaunchRequest'
                    - type: 'null'
                      properties: {}
                  description: 'pass user intention, use Intent Request to skip the Voiceflow built-in NLP'
                config:
                  type: object
                  description: optional settings
                  properties:
                    tts:
                      type: boolean
                      default: false
                      description: send back a text-to-speech mp3 audio snippet for every speak block
                    stripSSML:
                      type: boolean
                      default: true
                      description: remove all SSML tags in the response message
                    stopTypes:
                      type: array
                      description: 'which trace types to return prematurely on, define your own path'
                      items:
                        type: string
                        example: '["Pay Credit Card"]'
                        default: '[]'
            examples:
              Text Request:
                value:
                  request:
                    type: text
                    payload: can I order a large pepperoni pizza
              Empty Request:
                value:
                  request: null
              Intent Request:
                value:
                  request:
                    type: intent
                    payload:
                      query: I want a large pepperoni pizza
                      intent:
                        name: order_pizza_intent
                      entities:
                        - name: size
                          value: large
                        - name: type
                          value: pepperoni
                      confidence: 0.5
              Launch Request:
                value:
                  request:
                    type: launch
              Config:
                value:
                  request:
                    type: text
                    payload: I would like to order a huge pepperoni pizza
                  config:
                    tts: false
                    stripSSML: true
                    stopTypes:
                      - Pay Credit Card
      responses:
        '200':
          $ref: '#/components/responses/Trace'
        '404':
          description: Not Found
    parameters: []
  '/state/{versionID}/user/{userID}':
    parameters:
      - name: versionID
        in: path
        description: voiceflow project version ID
        required: true
        schema:
          type: string
      - name: userID
        in: path
        description: unique user ID (create this yourself)
        required: true
        schema:
          type: string
      - in: header
        name: Authorization
        description: voiceflow API key
        required: true
        schema:
          type: string
          example: VF.6063709377e568001c098380.XXXXXXXXX.....
    get:
      summary: fetch state
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/State'
                  - type: 'null'
              examples:
                Example State:
                  value:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                    storage: {}
                    variables:
                      pizza_type: pepperoni
                      sessions: 5
                      payment: credit
      operationId: getState
      description: Fetch the user's current state
    post:
      summary: update state
      tags: []
      operationId: postState
      responses:
        '200':
          description: successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
              examples:
                Example State:
                  value:
                    stack:
                      - programID: 6062631246b44d80a8a345b4
                        nodeID: 60626307fd9a230006a5e289
                    storage: {}
                    variables:
                      pizza_type: pepperoni
                      sessions: 5
                      payment: credit
      description: "Update the user's current state, useful for externally updating the user's variables or resetting everything."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
            examples:
              Example State:
                value:
                  stack:
                    - programID: 6062631246b44d80a8a345b4
                      nodeID: 60626307fd9a230006a5e289
                  storage: {}
                  variables:
                    pizza_type: pepperoni
                    sessions: 5
                    payment: credit
              Empty State:
                value:
                  stack: []
                  storage: {}
                  variables: {}
        description: valid new user state
    delete:
      summary: delete state
      tags: []
      operationId: deleteState
      responses:
        '200':
          description: OK
      description: Delete all state and session data for user.
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  securitySchemes:
    API Key:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    IntentRequest:
      title: IntentRequest
      type: object
      x-examples:
        Order Pizza:
          type: intent
          payload:
            intent:
              name: order_pizza_intent
            query: I want a huge pepperoni pizza
            entities:
              - name: size
                value: large
                query: huge
              - name: topping
                value: pepperoni
            confidence: 0.5
      properties:
        type:
          type: string
          enum:
            - intent
          example: intent
        payload:
          type: object
          required:
            - intent
            - entities
          properties:
            intent:
              type: object
              properties:
                name:
                  type: string
                  example: order_pizza_intent
            query:
              type: string
              example: I want a large pepperoni pizza
            entities:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: size
                  value:
                    type: string
                    example: large
                  query:
                    type: string
                required:
                  - name
                  - value
            confidence:
              type: number
      required:
        - type
        - payload
    TextRequest:
      title: TextRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - text
        payload:
          type: string
          example: I would like to order a huge pepperoni pizza
      x-examples:
        example-1:
          type: text
          payload: I would like to order a huge pepperoni pizza
    SpeakTrace:
      title: TraceSpeak
      type: object
      x-examples:
        Pizza Response:
          type: speak
          payload:
            type: message
            message: one large pepperoni pizza is that correct?
        Audio Speak:
          type: speak
          payload:
            message: "<audio src='https://voiceflow.com/play.mp3'/>"
            src: 'https://voiceflow.com/play.mp3'
            type: audio
      properties:
        type:
          type: string
          enum:
            - speak
          example: speak
        payload:
          type: object
          required:
            - message
            - type
          properties:
            message:
              type: string
              example: one large pepperoni pizza is that correct?
            src:
              type: string
            type:
              type: string
              example: message
              enum:
                - message
                - audio
      required:
        - type
        - payload
      description: Generated by the Speak Step
    ChoiceTrace:
      title: ChoiceTrace
      type: object
      x-examples:
        Example Choice:
          type: choice
          payload:
            choices:
              - name: 'yes'
              - name: 'no'
      properties:
        type:
          type: string
          example: choice
          enum:
            - choice
        payload:
          type: object
          required:
            - choices
          properties:
            choices:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: 'yes'
                  intent:
                    type: string
                    example: YesIntent
                required:
                  - name
      required:
        - type
        - payload
      description: Generated by a Choice Step
    VisualTrace:
      title: VisualTrace
      type: object
      properties:
        type:
          type: string
          example: visual
          enum:
            - visual
        payload:
          type: object
          properties:
            image:
              type: string
              example: 'https://voiceflow.com/logo.png'
      required:
        - type
        - payload
      x-examples:
        Visual Trace Example:
          type: visual
          payload:
            image: 'https://voiceflow.com/logo.png'
      description: Generated by the Visuals Step
    CustomTrace:
      description: Generated by the Trace Block
      type: object
      x-examples:
        Custom Trace Example:
          type: Pay Credit Card
          payload: "{ 'sender': 'user@gmail', 'body': 'great message' }"
          paths:
            - event:
                name: success
            - event:
                name: denied
            - event:
                name: pending
          defaultPath: 0
      properties:
        type:
          type: string
          minLength: 1
          example: Pay Credit Card
        payload:
          type: string
          minLength: 1
          example: "{ 'sender': 'user@gmail', 'body': 'great message' }"
        paths:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              event:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    example: success
                required:
                  - name
        defaultPath:
          type: number
          example: 0
      required:
        - type
        - payload
        - paths
        - defaultPath
    State:
      title: State
      type: object
      x-examples:
        Example State:
          stack:
            - programID: 6062631246b44d80a8a345b4
              nodeID: 60626307fd9a230006a5e289
          storage: {}
          variables:
            pizza_type: pepperoni
            sessions: 5
            payment: credit
      properties:
        stack:
          type: array
          description: all the flows the user current has active
          items:
            type: object
            properties:
              programID:
                type: string
                description: flow user has on the stack
                example: 6062631246b44d80a8a345b4
              nodeID:
                type: string
                nullable: true
                description: current block this flow is on
                example: 60626307fd9a230006a5e289
              variables:
                type: object
                description: flow scoped variables
              storage:
                type: object
                description: internal flow parameters for runtime
              commands:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - push
                        - jump
                    event:
                      type: object
            required:
              - programID
        storage:
          type: object
        variables:
          type: object
      required:
        - stack
        - storage
        - variables
    LaunchRequest:
      title: LaunchRequest
      type: object
      properties:
        type:
          type: string
          example: launch
          enum:
            - launch
      required:
        - type
  responses:
    Trace:
      description: A sequential array of response "traces" to display back to the user. They can take a variety of types - common types are defined here.
      content:
        application/json:
          schema:
            type: object
            properties:
              trace:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/SpeakTrace'
                    - $ref: '#/components/schemas/ChoiceTrace'
                    - type: object
                      properties:
                        type:
                          type: string
                        payload: {}
                    - $ref: '#/components/schemas/VisualTrace'
                    - $ref: '#/components/schemas/CustomTrace'
          examples:
            Sample Trace:
              value:
                trace:
                  - type: speak
                    payload:
                      type: message
                      message: one large pepperoni pizza is that correct?
                  - type: speak
                    payload:
                      type: audio
                      src: 'https://voiceflow.com/chime.mp3'
                      message: "<audio src='https://voiceflow.com/chime.mp3'/>"
                  - type: visual
                    payload:
                      image: 'https://voiceflow.com/splash.mp3'
servers:
  - url: 'https://general-runtime.voiceflow.com'
