version: 2.1

parameters:
  npm-repo:
    type: string
    default: "@voiceflow/general-runtime"
  container-image-url:
    type: string
    default: "168387678261.dkr.ecr.us-east-1.amazonaws.com/general-runtime"
  k8s-asset:
    type: string
    default: "deployment/general-runtime"
  k8s-namespace:
    type: string
    default: "voiceflow" # This is usually voiceflow
  ssh-fingerprint:
    type: string
    default: "SHA256:7FhWIIg1mYzFjcATPWZB3H9VVpUQihp2rQh1HFhPdks"
  track-component:
    type: string
    default: "general-runtime"

{{- $borsBranches := coll.Slice "trying" "staging" }}
{{- $masterProdBranches := coll.Slice "master" "prod" }}

# Reusable YAML chunks
defaults:
  bors_branches_filters: &bors_branches_filters
    branches:
      only:
        {{- range $borsBranches }}
        - {{ . }}
        {{- end }}

  slack-fail-post-step: &slack-fail-post-step
    post-steps:
      - vfcommon/notify_slack:
          channel: dev_general
          event: fail
          mentions: "@eng_platform"
          template: basic_fail_1
          branch_pattern: master

  executor: &node-executor
    name: vfcommon/node-executor-node-20
    tag: {{ .values.node_version }}-vf-1

  code-test-executor: &code-test-node-executor
    name: vfcommon/code-test-executor-node-20
    tag: {{ .values.node_version }}-vf-1

orbs:
  vfcommon: voiceflow/common@{{ .values.common_orb_version }}
  sonarcloud: sonarsource/sonarcloud@2.0.0


jobs:
  test:
    executor: *code-test-node-executor
    steps:
      - checkout
      - vfcommon/setup_dynamodb
      - vfcommon/docker_login
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Lint Dockerfile
          # hadolint comes from the executor image and is outdated
          command: hadolint ./Dockerfile
          background: true
      - vfcommon/staged_buildx:
          image_repo: << pipeline.parameters.container-image-url >>
          target: checks
          no_cache_filter: checks
          # OR output: ci-reports
          output: type=local,dest=ci-reports
          extra_build_args: &node_version_arg NODE_VERSION={{ .values.node_version }}
          post_steps:
            - store_test_results:
                path: ci-reports
            - run:
                name: ESLint
                when: always
                command: |
                  set +o pipefail
                  ls -lah ./ci-reports/
                  cat ./ci-reports/report.json
                  cat ./ci-reports/eslint.log
                  cat ./ci-reports/eslint.xml | grep 'failures="' | ( ! grep -qE 'failures="[1-9]+' )

            - run:
                name: Depcheck
                when: always
                command: |
                  set +o pipefail
                  cat ./ci-reports/dep-check.log
                  grep -q "No depcheck issue" ./ci-reports/dep-check.log
            - run:
                name: Unit Tests
                when: always
                command: |
                  set +o pipefail
                  cat ./ci-reports/unit-tests.log
                  cat ./ci-reports/unit-tests.xml | grep 'failures="' | ( ! grep -qE 'failures="[1-9]+' )
                  set -o pipefail
      - vfcommon/staged_buildx:
          image_repo: << pipeline.parameters.container-image-url >>
          image_tag: build
          target: build
          enable_cache_to: true
          extra_build_args: *node_version_arg
      - vfcommon/docker_run_networked:
          image_repo: << pipeline.parameters.container-image-url >>
          image_tag: build
          command: yarn test:integration
          ## pre_steps: setup volume
          ## post_steps: copy out artifacts
      - sonarcloud/scan

  install_and_buildx:
    executor: *node-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - vfcommon/docker_login
      - vfcommon/authenticate_npm
      - vfcommon/staged_buildx:
          image_repo: << pipeline.parameters.container-image-url >>
          target: "deps"
          enable_cache_to: false
          extra_build_args: *node_version_arg
      - vfcommon/staged_buildx:
          image_repo: << pipeline.parameters.container-image-url >>
          target: "build"
          enable_cache_to: true
          extra_build_args: *node_version_arg


  collect-logs:
    executor: vfcommon/default-executor
    parameters:
      cluster:
        type: string
        description: Name of the cluster in which the environment exists
        default: "cm4-vf-dev-br-2-0-p1"
    steps:
      - vfcommon/install-vfcli:
          init-cluster: << parameters.cluster >>
      - run:
          name: Install stern
          command: |
            curl -sSL https://raw.githubusercontent.com/upciti/wakemeops/main/assets/install_repository | sudo bash
            sudo apt install stern
      - run:
          name: Gather Logs
          environment:
            ENV_NAME: {{ .values.e2e_env_name }}
            LOG_DIR: &log_dir /tmp/pod-logs-{{ .values.e2e_env_name }}
          command: |
            # function capture_logs() {
            #   stern -n "${ENV_NAME:?}" -l "app.kubernetes.io/name=$1" -f > "${LOG_DIR:?}/$1.log"
            #   # kubectl logs -n "${ENV_NAME:?}" -l "app.kubernetes.io/name=$1" -f > "${LOG_DIR:?}/$1.log"
            # }

            # mkdir "${LOG_DIR:?}"
            # capture_logs realtime-http &
            # kubectl describe nodes -n "${ENV_NAME:?}" > "${LOG_DIR:?}/kube-resources.log" &

            # kubectl events -n "${ENV_NAME:?}" -w \
            #   | tee /dev/tty \
            #   | tee "${LOG_DIR:?}/kube-events.log" \
            #   | grep -q "smoke-test-stop-log-collection" \
            #   || true

            # echo 'termination event received'
            # echo 'dumping cluster information'

            # kubectl cluster-info dump -n "${ENV_NAME:?}" --output-directory /tmp/cluster-info
            job_status=$(circleci-agent job status vfcommon/run-smoke-tests)
            if [ "$job_status" == "success" ] || [ "$job_status" == "failed" ]; then
              echo "Job has finished executing"
            else
              echo "Job is still running with status $job_status"
            fi
      # - store_artifacts:
      #     name: Store Logs
      #     path: *log_dir
      #     destination: logs
      # - store_artifacts:
      #     name: Store Cluster Info
      #     path: /tmp/cluster-info
      #     destination: cluster-info
  initial-setup:
    executor: vfcommon/default-executor
    steps:

       - run:
          name: Initial Setup
          environment:
          command: |
            sleep 30
            echo "Initial Setup done"

  mock-e2e-run:
    executor: vfcommon/default-executor
    steps:
        - run:
          name: mock-e2e-run
          environment:
          command: |
            sleep 60
            echo "mock-e2e-run done"

  mock-log-collection:
    executor: vfcommon/default-executor
    steps:
        - run:
          name: mock-log-collection
          environment:
          command: |
            job_status=$(circleci-agent job status mock-e2e-run)
            if [ "$job_status" == "success" ] || [ "$job_status" == "failed" ]; then
              echo "Job has finished executing"
            else
              echo "Job is still running with status $job_status"
            fi
            echo "mock-log-collection done"

workflows:
  {{- if has $masterProdBranches .values.branch }}
  test-and-release:
  {{- else if has $borsBranches .values.branch }}
  e2e-tests:
  {{- else }}
  test:
  {{- end }}
    jobs:
      - initial-setup:
          filters: *bors_branches_filters
      - mock-e2e-run:
          requires:
            - initial-setup
          filters: *bors_branches_filters
      - mock-log-collection:
          requires:
            -initial-setup
          filters: *bors_branches_filters
      # - install_and_buildx:
      #     <<: *slack-fail-post-step
      #     context: dev-test

      # - test:
      #     <<: *slack-fail-post-step
      #     context: dev-test
      #     requires:
      #       - install_and_buildx
      #     filters:
      #       branches:
      #         ignore:
      #           - production
      #           - /^break-glass.*$/

      # - vfcommon/release:
      #     <<: *slack-fail-post-step
      #     context: dev-test
      #     requires:
      #       - install_and_buildx
      #       - test
      #     filters:
      #       branches:
      #         only: master

      # - vfcommon/update_track:
      #     context: dev-test
      #     image_repo: << pipeline.parameters.container-image-url >>
      #     component: << pipeline.parameters.track-component >>
      #     remote_docker_version: default
      #     extra_build_args: *node_version_arg
      #     enable_cache_to: {{ eq .values.branch "master" }}
      #     requires:
      #       {{- if eq .values.branch "master" }}
      #       - test
      #       {{- end }}
      #       - install_and_buildx
      #       - vfcommon/release
      #     filters:
      #       branches:
      #         ignore:
      #           - /^break-glass.*$/

      # - vfcommon/provision-env:
      #     context: dev-test
      #     env-name: {{ .values.e2e_env_name }}
      #     pool-type: e2e
      #     filters: *bors_branches_filters
      # - vfcommon/prepare-env:
      #     context: dev-test
      #     env-name: {{ .values.e2e_env_name }}
      #     branch: {{ .values.branch }}
      #     tracked-components: << pipeline.parameters.track-component >>
      #     filters: *bors_branches_filters
      #     requires:
      #       - vfcommon/provision-env
      #       - vfcommon/update_track
      # - vfcommon/run-smoke-tests:
      #     context: dev-test
      #     e2e-env-name: {{ .values.e2e_env_name }}
      #     requires:
      #       # - vfcommon/build-e2e-tests
      #       - vfcommon/prepare-env
      #     filters: *bors_branches_filters
      # - collect-logs:
      #     context: dev-test
      #     requires:
      #       - vfcommon/prepare-env
      #     filters: *bors_branches_filters
      # - vfcommon/release-env:
      #     context: dev-test
      #     env-name: {{ .values.e2e_env_name }}
      #     requires:
      #       - vfcommon/run-smoke-tests
      #     filters: *bors_branches_filters

      # - vfcommon/sync_branches:
      #     check_commit_message: "[bugfix]"
      #     ssh_key: << pipeline.parameters.ssh-fingerprint >>
      #     checkout: true
      #     context: dev-test
      #     name: sync-branches-bugfix
      #     requires:
      #       - install_and_buildx
      #       - test
      #       - vfcommon/release
      #     filters:
      #       branches:
      #         only: master

      # - vfcommon/sync_branches:
      #     check_commit_message: "[breakglass]"
      #     ssh_key: << pipeline.parameters.ssh-fingerprint >>
      #     checkout: true
      #     context: dev-test
      #     name: sync-branches-break-glass
      #     requires:
      #       - install_and_buildx
      #     filters:
      #       branches:
      #         only: master

      # - vfcommon/generate_technical_documentation:
      #     <<: *slack-fail-post-step
      #     context: dev-test
      #     requires:
      #       - test
      #       - vfcommon/release
      #     filters:
      #       branches:
      #         only: master

      # Update Production branch
      - vfcommon/post_image_push_actions:
          namespace: << pipeline.parameters.k8s-namespace >>
          component: << pipeline.parameters.track-component >>
          tagged: true
          context: dev-test
          requires:
            - vfcommon/update_track
          filters:
            branches:
              only:
                - production
